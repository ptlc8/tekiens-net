# List of stages for jobs, and their order of execution
stages:
  - lint-and-build
  - test
  - publish

# Default image for all jobs
default:
  image: docker:latest
  services:
    - docker:dind

# Job building docker image
build-docker-job:
  stage: lint-and-build
  script:
    - echo "Building docker image..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - echo "Docker image built."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Job linting the front-end code
lint-front-job:
  stage: lint-and-build
  image: node:latest
  script:
    - cd front
    - echo "Linting code..."
    - npm ci
    - npm run lint
    - echo "Lint complete."
  # run this job only when changes are made to front-end code in a merge request
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "front/**/*"
        compare_to: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

# Job linting the back-end code
lint-back-job:
  stage: lint-and-build
  image: python:latest
  script:
    - cd back
    - echo "Linting code..."
    - pip install ruff
    - ruff check
    - echo "Lint complete."
  # run this job only when changes are made to back-end code in a merge request
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "back/**/*"
        compare_to: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

# Job testing the container
test-docker-job:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  script:
    - echo "Testing docker image..."
    - cd /app/back
    - flask routes
    - echo "Docker image tested."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  needs:
    - build-docker-job

# Job publishing the container to the registry
publish-docker-job:
  stage: publish
  script:
    - echo "Publishing docker image..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "Docker image published."
  rules: # commit is on default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - build-docker-job