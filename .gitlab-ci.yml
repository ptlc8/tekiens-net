# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - publish

# Default image for all jobs
default:
  image: docker:latest
  services:
    - docker:dind
  cache:
    key: docker-cache
    paths:
      - /var/lib/docker

# Job building docker image
build-docker-job:
  stage: build
  script:
    - echo "Building docker image... but first logging in to $CI_REGISTRY"
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - echo "Docker image built."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Job linting the front-end code
lint-front-job:
  stage: test
  image: node:latest
  script:
    - cd front
    - echo "Linting code..."
    - npm ci
    - npm run lint
    - echo "Lint complete."
  # run this job only when changes are made to front-end code in a merge request
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "front/**/*"
        compare_to: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

# Job linting the back-end code
lint-back-job:
  stage: test
  image: python:latest
  script:
    - cd back
    - echo "Linting code..."
    - pip install ruff
    - ruff check
    - echo "Lint complete."
  # run this job only when changes are made to back-end code in a merge request
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "back/**/*"
        compare_to: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

# Job testing the database files
test-db-job:
  stage: test
  image: mariadb:lts
  services:
    - name: mariadb:lts
      alias: db
      variables:
        MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: 1
      entrypoint:
        - /bin/sh
        - -c
        - cp "$CI_PROJECT_DIR"/db/mariadb.cnf /etc/mysql/conf.d/mariadb.cnf && docker-entrypoint.sh mariadbd
  script:
    - echo "Testing SQL files..."
    - cp db/mariadb.cnf /etc/mysql/conf.d/mariadb.cnf
    - mariadb -h db --skip_ssl -e "CREATE DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
    - mariadb -h db --skip_ssl -D test < db/init.sql
    - mariadb -h db --skip_ssl -D test -e "SHOW TABLES;"
    - mariadb -h db --skip_ssl -D test < db/sample.sql
    - echo "SQL files tested."
  # run this job only when changes are made to an SQL file in a merge request
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "db/**/*"
        compare_to: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

# Job testing the container
test-docker-job:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  script:
    - echo "Testing docker image..."
    - cd /app/back
    - flask routes
    - echo "Docker image tested."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  needs:
    - build-docker-job

# Job publishing the container to the registry
publish-docker-job:
  stage: publish
  script:
    - echo "Publishing docker image..."
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "Docker image published."
  rules: # commit is on default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - build-docker-job
